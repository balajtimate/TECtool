#!/usr/bin/env python

# _____________________________________________________________________________
# -----------------------------------------------------------------------------
# import needed (external) modules
# -----------------------------------------------------------------------------

import os
import sys
from argparse import ArgumentParser, RawTextHelpFormatter, FileType
import HTSeq

# _____________________________________________________________________________
# -----------------------------------------------------------------------------
# import our own modules
# -----------------------------------------------------------------------------
# import tectool classes

from tectool.exon import Exon
from tectool.transcript import Transcript
from tectool.gene import Gene
from tectool.detailed_alignment import DetailedAlignment
from tectool.split_event import SplitEvent
from tectool.analysis_unit import AnalysisUnit
from tectool.feature_counts import FeatureCounts
from tectool.annotation import Annotation

# _____________________________________________________________________________
# -----------------------------------------------------------------------------
# Main function
# -----------------------------------------------------------------------------


def main():
    """
    Main function
    """

    __doc__ = "Add novel transcripts to a given annotation (GTF file)."

    parser = ArgumentParser(
        description=__doc__,
        formatter_class=RawTextHelpFormatter
    )

    parser.add_argument(
        "--list_of_gtf_files",
        dest="list_of_gtf_files",
        help="[INPUT] Tab separated file (TSV-format) that contains in" +
        " the first column pathways to GTF files that contain novel " +
        "transcripts (having intronic poly(A) sites) that will be add " +
        "to the ref-gtf file. NOTE: The script will not correct for " +
        "novel gene boarders, since intronic poly(A) sites will not " +
        "change gene boarders. Thus, do not use this script for adding" +
        " transcripts that are not within defined gene boarders.",
        required=True,
        metavar="FILE")

    parser.add_argument(
        "--out-dir",
        dest="out",
        help="[OUTPUT] The directory that will be used to write files, " +
        "including the enriched annotation (GTF file).",
        required=True,
        metavar="FILE"
    )

    parser.add_argument(
        "-v",
        "--verbose",
        action="store_true",
        dest="verbose",
        default=False,
        required=False,
        help="Verbose"
    )

    # _________________________________________________________________________
    # -------------------------------------------------------------------------
    # get the arguments
    # -------------------------------------------------------------------------
    try:
        options = parser.parse_args()
    except(Exception):
        parser.print_help()

    # _________________________________________________________________________
    # -------------------------------------------------------------------------
    # Create output directories
    # -------------------------------------------------------------------------
    if not os.path.exists(options.out):
        os.makedirs(options.out)

    # _________________________________________________________________________
    # -------------------------------------------------------------------------
    # Go over all GTF files in the list_of_gtf_files and add novel transcripts
    # to the annotation.
    # -------------------------------------------------------------------------

    # create an annotation
    annotation = Annotation(
        annotation_id="merged_annotation",
        tmp=options.out
    )

    # open the file
    list_of_gtf_files_handle = open(options.list_of_gtf_files, "r")

    # create an annotation from each GTF file and then extend the
    # reference annotation (ref-gtf) by this annotation.
    for line in list_of_gtf_files_handle:

        # parse the current GTF file
        if options.verbose:
            sys.stdout.write((80 * "_" + os.linesep))
            sys.stdout.write((80 * "-" + os.linesep))

        gtf_file_path = str(line.strip().split("\t")[0])
        sys.stdout.write("Reading annotation file:\t{}{}".format(
            gtf_file_path,
            os.linesep
        ))

        curr_annotation = Annotation(
            annotation_id=gtf_file_path,
            tmp=options.out
        )

        curr_annotation.parse(
            gtf_file_path,
            verbose=options.verbose
        )

        if options.verbose:
            sys.stdout.write((80 * "-" + os.linesep))

        # extend the annotation by the current annotation
        annotation.extend(
            annotation=curr_annotation,
            verbose=options.verbose
        )

    # close the filehandle
    list_of_gtf_files_handle.close()

    # write the output GTF file
    output_gtf_file_path = os.path.join(options.out, "merged_annotation.gtf")
    output_gtf_file_handle = open(output_gtf_file_path, 'w')
    annotation.write_gtf(
        output_file=output_gtf_file_handle,
        with_CDS=True
    )
    output_gtf_file_handle.close()

# _____________________________________________________________________________
# -----------------------------------------------------------------------------
# Call the Main function and catch Keyboard interrups
# -----------------------------------------------------------------------------


if __name__ == '__main__':
    try:
        main()
    except KeyboardInterrupt:
        sys.stderr.write("User interrupt!\n")
        sys.exit(0)
